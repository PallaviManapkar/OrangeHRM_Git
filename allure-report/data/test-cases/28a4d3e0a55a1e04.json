{"uid":"28a4d3e0a55a1e04","name":"test_page_title_001","fullName":"testCases.test_login.Test_Login#test_page_title_001","historyId":"37518f13d7d322a452692dcf9fa516e6","time":{"start":1691623497497,"stop":1691623497516,"duration":19},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=115.0.5790.171)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF723784A62+57106]\n\t(No symbol) [0x00007FF7236FCF52]\n\t(No symbol) [0x00007FF7235CE2CB]\n\t(No symbol) [0x00007FF7235ADEB9]\n\t(No symbol) [0x00007FF72362AE07]\n\t(No symbol) [0x00007FF72363DBEF]\n\t(No symbol) [0x00007FF723626793]\n\t(No symbol) [0x00007FF7235FCE81]\n\t(No symbol) [0x00007FF7235FE064]\n\tGetHandleVerifier [0x00007FF723A34222+2873042]\n\tGetHandleVerifier [0x00007FF723A86590+3209792]\n\tGetHandleVerifier [0x00007FF723A7F3AF+3180639]\n\tGetHandleVerifier [0x00007FF723815F25+652245]\n\t(No symbol) [0x00007FF723708618]\n\t(No symbol) [0x00007FF7237047C4]\n\t(No symbol) [0x00007FF7237048BC]\n\t(No symbol) [0x00007FF7236F4C33]\n\tBaseThreadInitThunk [0x00007FF928D27614+20]\n\tRtlUserThreadStart [0x00007FF92A3C26B1+33]","statusTrace":"self = <testCases.test_login.Test_Login object at 0x000001F28632FB50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a0e2aa2cfa5ae9c2765d1cf6172d7d21\")>\n\n    def test_page_title_001(self, setup):\n        self.log.info(\"Testcase test_page_title_001 is started\")\n        self.log.info(\"Opening browser\")\n        self.driver = setup\n>       self.log.info(\"Page Title is \" + self.driver.title)\n\ntestCases\\test_login.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:365: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F286331210>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7236F4C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FF928D27614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF92A3C26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=115.0.5790.171)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF723784A62+57106]\nE       \t(No symbol) [0x00007FF7236FCF52]\nE       \t(No symbol) [0x00007FF7235CE2CB]\nE       \t(No symbol) [0x00007FF7235ADEB9]\nE       \t(No symbol) [0x00007FF72362AE07]\nE       \t(No symbol) [0x00007FF72363DBEF]\nE       \t(No symbol) [0x00007FF723626793]\nE       \t(No symbol) [0x00007FF7235FCE81]\nE       \t(No symbol) [0x00007FF7235FE064]\nE       \tGetHandleVerifier [0x00007FF723A34222+2873042]\nE       \tGetHandleVerifier [0x00007FF723A86590+3209792]\nE       \tGetHandleVerifier [0x00007FF723A7F3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF723815F25+652245]\nE       \t(No symbol) [0x00007FF723708618]\nE       \t(No symbol) [0x00007FF7237047C4]\nE       \t(No symbol) [0x00007FF7237048BC]\nE       \t(No symbol) [0x00007FF7236F4C33]\nE       \tBaseThreadInitThunk [0x00007FF928D27614+20]\nE       \tRtlUserThreadStart [0x00007FF92A3C26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1691623219870,"stop":1691623497496,"duration":277626},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=115.0.5790.171)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF723784A62+57106]\n\t(No symbol) [0x00007FF7236FCF52]\n\t(No symbol) [0x00007FF7235CE2CB]\n\t(No symbol) [0x00007FF7235ADEB9]\n\t(No symbol) [0x00007FF72362AE07]\n\t(No symbol) [0x00007FF72363DBEF]\n\t(No symbol) [0x00007FF723626793]\n\t(No symbol) [0x00007FF7235FCE81]\n\t(No symbol) [0x00007FF7235FE064]\n\tGetHandleVerifier [0x00007FF723A34222+2873042]\n\tGetHandleVerifier [0x00007FF723A86590+3209792]\n\tGetHandleVerifier [0x00007FF723A7F3AF+3180639]\n\tGetHandleVerifier [0x00007FF723815F25+652245]\n\t(No symbol) [0x00007FF723708618]\n\t(No symbol) [0x00007FF7237047C4]\n\t(No symbol) [0x00007FF7237048BC]\n\t(No symbol) [0x00007FF7236F4C33]\n\tBaseThreadInitThunk [0x00007FF928D27614+20]\n\tRtlUserThreadStart [0x00007FF92A3C26B1+33]","statusTrace":"self = <testCases.test_login.Test_Login object at 0x000001F28632FB50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a0e2aa2cfa5ae9c2765d1cf6172d7d21\")>\n\n    def test_page_title_001(self, setup):\n        self.log.info(\"Testcase test_page_title_001 is started\")\n        self.log.info(\"Opening browser\")\n        self.driver = setup\n>       self.log.info(\"Page Title is \" + self.driver.title)\n\ntestCases\\test_login.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:365: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F286331210>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7236F4C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FF928D27614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF92A3C26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=115.0.5790.171)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF723784A62+57106]\nE       \t(No symbol) [0x00007FF7236FCF52]\nE       \t(No symbol) [0x00007FF7235CE2CB]\nE       \t(No symbol) [0x00007FF7235ADEB9]\nE       \t(No symbol) [0x00007FF72362AE07]\nE       \t(No symbol) [0x00007FF72363DBEF]\nE       \t(No symbol) [0x00007FF723626793]\nE       \t(No symbol) [0x00007FF7235FCE81]\nE       \t(No symbol) [0x00007FF7235FE064]\nE       \tGetHandleVerifier [0x00007FF723A34222+2873042]\nE       \tGetHandleVerifier [0x00007FF723A86590+3209792]\nE       \tGetHandleVerifier [0x00007FF723A7F3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF723815F25+652245]\nE       \t(No symbol) [0x00007FF723708618]\nE       \t(No symbol) [0x00007FF7237047C4]\nE       \t(No symbol) [0x00007FF7237048BC]\nE       \t(No symbol) [0x00007FF7236F4C33]\nE       \tBaseThreadInitThunk [0x00007FF928D27614+20]\nE       \tRtlUserThreadStart [0x00007FF92A3C26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException","steps":[],"attachments":[{"uid":"386b35f96c1dde53","name":"log","source":"386b35f96c1dde53.txt","type":"text/plain","size":147}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"Test_Login"},{"name":"host","value":"DESKTOP-HFVASSE"},{"name":"thread","value":"7956-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"28a4d3e0a55a1e04.json","parameterValues":[]}